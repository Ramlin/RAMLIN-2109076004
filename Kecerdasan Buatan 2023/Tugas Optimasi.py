# -*- coding: utf-8 -*-
"""Copy of Welcome To Colaboratory

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1xZ16p7X8YVhuPnfpKXYBLdX73e7ha-Pf
"""

import random

# Fungsi objektif
def fitness(chromosome):
    a, b, c, d = chromosome
    return abs(a + 4*b + 2*c + 3*d - 30)

# Inisialisasi populasi
def initialize_population(population_size):
    population = []
    for _ in range(population_size):
        chromosome = [random.randint(0, 30), random.randint(0, 10), random.randint(0, 10), random.randint(0, 10)]
        population.append(chromosome)
    return population

# Seleksi orang tua menggunakan metode roulette wheel selection
def select_parents(population):
    total_fitness = sum(fitness(chromosome) for chromosome in population)
    probabilities = [fitness(chromosome) / total_fitness for chromosome in population]
    cumulative_probabilities = [sum(probabilities[:i+1]) for i in range(len(probabilities))]

    parents = []
    for _ in range(len(population)):
        r = random.random()
        for i, chromosome in enumerate(population):
            if cumulative_probabilities[i] > r:
                parents.append(chromosome)
                break

    return parents

# Crossover menggunakan one-cut point
def crossover(parents, crossover_rate):
    offspring = []
    for i in range(0, len(parents), 2):
        parent1 = parents[i]
        parent2 = parents[i+1]
        if random.random() < crossover_rate:
            cut_point = random.randint(1, 3)  # Memilih titik potong dari 1 hingga 3
            child1 = parent1[:cut_point] + parent2[cut_point:]
            child2 = parent2[:cut_point] + parent1[cut_point:]
        else:
            child1 = parent1
            child2 = parent2
        offspring.extend([child1, child2])
    return offspring

# Mutasi
def mutate(offspring, mutation_rate):
    total_genes = len(offspring) * 4
    num_mutations = int(total_genes * mutation_rate)

    for _ in range(num_mutations):
        chromosome = random.choice(offspring)
        gene_index = random.randint(0, 3)
        chromosome[gene_index] = random.randint(0, 30) if gene_index == 0 else random.randint(0, 10)

# Algoritma genetika
def genetic_algorithm(population_size, crossover_rate, mutation_rate, num_generations):
    population = initialize_population(population_size)

    for _ in range(num_generations):
        parents = select_parents(population)
        offspring = crossover(parents, crossover_rate)
        mutate(offspring, mutation_rate)

        population = offspring

    # Mengembalikan chromosome dengan fitness terbaik
    best_chromosome = min(population, key=fitness)
    return best_chromosome

# Pengaturan parameter
population_size = 6
crossover_rate = 0.8
mutation_rate = 0.1
num_generations = 100

# Menjalankan algoritma genetika
best_chromosome = genetic_algorithm(population_size, crossover_rate, mutation_rate, num_generations)

# Menampilkan hasil
a, b, c, d = best_chromosome
print("Nilai a:", a)
print("Nilai b:", b)
print("Nilai c:", c)
print("Nilai d:", d)
print("Fungsi Objektif:", fitness(best_chromosome))

"""You can import your own data into Colab notebooks from your Google Drive account, including from spreadsheets, as well as from Github and many other sources. To learn more about importing data, and how Colab can be used for data science, see the links below under [Working with Data](#working-with-data).

<div class="markdown-google-sans">

## Machine learning
</div>

With Colab you can import an image dataset, train an image classifier on it, and evaluate the model, all in just [a few lines of code](https://colab.research.google.com/github/tensorflow/docs/blob/master/site/en/tutorials/quickstart/beginner.ipynb). Colab notebooks execute code on Google's cloud servers, meaning you can leverage the power of Google hardware, including [GPUs and TPUs](#using-accelerated-hardware), regardless of the power of your machine. All you need is a browser.

Colab is used extensively in the machine learning community with applications including:
- Getting started with TensorFlow
- Developing and training neural networks
- Experimenting with TPUs
- Disseminating AI research
- Creating tutorials

To see sample Colab notebooks that demonstrate machine learning applications, see the [machine learning examples](#machine-learning-examples) below.

<div class="markdown-google-sans">

## More Resources

### Working with Notebooks in Colab

</div>

- [Overview of Colaboratory](/notebooks/basic_features_overview.ipynb)
- [Guide to Markdown](/notebooks/markdown_guide.ipynb)
- [Importing libraries and installing dependencies](/notebooks/snippets/importing_libraries.ipynb)
- [Saving and loading notebooks in GitHub](https://colab.research.google.com/github/googlecolab/colabtools/blob/main/notebooks/colab-github-demo.ipynb)
- [Interactive forms](/notebooks/forms.ipynb)
- [Interactive widgets](/notebooks/widgets.ipynb)
- <img src="/img/new.png" height="20px" align="left" hspace="4px" alt="New"></img>

<div class="markdown-google-sans">

<a name="working-with-data"></a>
### Working with Data
</div>

- [Loading data: Drive, Sheets, and Google Cloud Storage](/notebooks/io.ipynb)
- [Charts: visualizing data](/notebooks/charts.ipynb)
- [Getting started with BigQuery](/notebooks/bigquery.ipynb)

<div class="markdown-google-sans">

### Machine Learning Crash Course

<div>

These are a few of the notebooks from Google's online Machine Learning course. See the [full course website](https://developers.google.com/machine-learning/crash-course/) for more.
- [Intro to Pandas DataFrame](https://colab.research.google.com/github/google/eng-edu/blob/main/ml/cc/exercises/pandas_dataframe_ultraquick_tutorial.ipynb)
- [Linear regression with tf.keras using synthetic data](https://colab.research.google.com/github/google/eng-edu/blob/main/ml/cc/exercises/linear_regression_with_synthetic_data.ipynb)

<div class="markdown-google-sans">

<a name="using-accelerated-hardware"></a>
### Using Accelerated Hardware
</div>

- [TensorFlow with GPUs](/notebooks/gpu.ipynb)
- [TensorFlow with TPUs](/notebooks/tpu.ipynb)

<div class="markdown-google-sans">

<a name="machine-learning-examples"></a>

### Featured examples

</div>

- [NeMo Voice Swap](https://colab.research.google.com/github/NVIDIA/NeMo/blob/stable/tutorials/VoiceSwapSample.ipynb): Use Nvidia's NeMo conversational AI Toolkit to swap a voice in an audio fragment with a computer generated one.

- [Retraining an Image Classifier](https://tensorflow.org/hub/tutorials/tf2_image_retraining): Build a Keras model on top of a pre-trained image classifier to distinguish flowers.
- [Text Classification](https://tensorflow.org/hub/tutorials/tf2_text_classification): Classify IMDB movie reviews as either *positive* or *negative*.
- [Style Transfer](https://tensorflow.org/hub/tutorials/tf2_arbitrary_image_stylization): Use deep learning to transfer style between images.
- [Multilingual Universal Sentence Encoder Q&A](https://tensorflow.org/hub/tutorials/retrieval_with_tf_hub_universal_encoder_qa): Use a machine learning model to answer questions from the SQuAD dataset.
- [Video Interpolation](https://tensorflow.org/hub/tutorials/tweening_conv3d): Predict what happened in a video between the first and the last frame.
"""